from discipline import Discipline


def load(graph):
    # 1
    logicadeprogramacaoi = Discipline('Lógica De Programação I', 1)
    matematicadiscreta = Discipline('Matemática Discreta', 1)
    calculoi = Discipline('Calculo I', 1)
    eletronicadigital = Discipline('Eletronica Digital', 1)
    graph.add_node(logicadeprogramacaoi)
    graph.add_node(matematicadiscreta)
    graph.add_node(calculoi)
    graph.add_node(eletronicadigital)
    # 2
    logicadeprogramacaoii = Discipline('Lógica De Programação Ii', 2)
    eletronicaanalogica = Discipline('Eletronica Analógica', 2)
    logicamatematica = Discipline('Lógica Matemática', 2)
    calculoii = Discipline('Cálculo Ii', 2)
    fisicai = Discipline('Física I', 2)
    graph.add_node(logicadeprogramacaoii)
    graph.add_node(eletronicaanalogica)
    graph.add_node(logicamatematica)
    graph.add_node(calculoii)
    graph.add_node(fisicai)
    graph.add_edge(logicadeprogramacaoi, logicadeprogramacaoii)
    graph.add_edge(calculoi, calculoii)
    # 3
    introducaoaanalisedealgoritimos = Discipline('Introdução A Análise De Algorítimos', 3)
    estruturadedados = Discipline('Estrutura De Dados', 3)
    fisicaii = Discipline('Física Ii', 3)
    equacoesdiferenciais = Discipline('Equações Diferenciais', 3)
    arquiteturadecomputadores = Discipline('Arquitetura De Computadores', 3)
    graph.add_node(introducaoaanalisedealgoritimos)
    graph.add_node(estruturadedados)
    graph.add_node(fisicaii)
    graph.add_node(equacoesdiferenciais)
    graph.add_node(arquiteturadecomputadores)
    graph.add_edge(matematicadiscreta, introducaoaanalisedealgoritimos)
    graph.add_edge(logicamatematica, introducaoaanalisedealgoritimos)
    graph.add_edge(logicadeprogramacaoii, estruturadedados)
    graph.add_edge(calculoi, fisicaii)
    graph.add_edge(fisicai, fisicaii)
    graph.add_edge(calculoii, equacoesdiferenciais)
    graph.add_edge(eletronicadigital, arquiteturadecomputadores)
    # 4
    aspectosteoricosdacomputacao = Discipline('Aspectos Teóricos Da Computação', 4)
    paradigmasdaprogramacao = Discipline('Paradígmas Da Programação', 4)
    metodologiacientificaetecnologica = Discipline('Metodologia Científica E Tecnologica', 4)
    pesquisaeordenacao = Discipline('Pesquisa E Ordenação', 4)
    microcontroladoresemiroprocessadores = Discipline('Microcontroladores E Miroprocessadores', 4)
    graph.add_node(aspectosteoricosdacomputacao)
    graph.add_node(paradigmasdaprogramacao)
    graph.add_node(metodologiacientificaetecnologica)
    graph.add_node(pesquisaeordenacao)
    graph.add_node(microcontroladoresemiroprocessadores)
    graph.add_edge(introducaoaanalisedealgoritimos, aspectosteoricosdacomputacao)
    graph.add_edge(estruturadedados, paradigmasdaprogramacao)
    graph.add_edge(estruturadedados, pesquisaeordenacao)
    graph.add_edge(arquiteturadecomputadores, microcontroladoresemiroprocessadores)
    # 5
    probabilidadeeestatistica = Discipline('Probabilidade E Estatística', 5)
    rededecomputadoresecomunicacaodedados = Discipline('Rede De Computadores E Comunicação De Dados', 5)
    sistemasoperacionaisi = Discipline('Sistemas Operacionais I', 5)
    graph.add_node(probabilidadeeestatistica)
    graph.add_node(rededecomputadoresecomunicacaodedados)
    graph.add_node(sistemasoperacionaisi)
